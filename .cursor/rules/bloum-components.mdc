---
description: 
globs: 
alwaysApply: false
---
# Bloum Component Creation Guide

## Overview
This guide helps create new components for the Bloum web components library, following established patterns and conventions.

## Project Structure
- Components are located in `src/components/[component-name]/`
- Each component has its own directory with:
  - `[component-name].css` - Component styles
  - `[component-name].stories.ts` - Storybook documentation
  - Optional: `[component-name].ts` - JavaScript/TypeScript functionality (for interactive components)

## Naming Conventions

### Directory and File Names
- Use **kebab-case** for all directory and file names
- Examples: `spinner/`, `button/`, `command-menu/`, `color-scheme-switcher/`

### CSS Class Names
- Base component class uses the component name: `.spinner`, `.button`, `.alert`
- Abbreviated forms are acceptable: `.btn` for button, `.menu` for dropdown-menu
- Size variants: `.component-sm`, `.component-md`, `.component-lg`, `.component-xl`, `.component-xs`
- Semantic variants: `.component-primary`, `.component-success`, `.component-danger`, `.component-warning`, `.component-info`
- Style variants: `.component-ghost`, `.component-outline`, `.component-solid`
- State classes: `.component-active`, `.component-disabled`, `.component-loading`
- Modifier classes: `.component-icon`, `.component-top-right`, `.component-dot`, `.component-ping`

### CSS Variable Naming Convention
- All CSS variables use the prefix `--bl-`
- Component-specific variables: `--bl-[component]-[property]`
- Examples:
  - `--bl-spinner-size`
  - `--bl-btn-color`
  - `--bl-alert-bg`
  - `--bl-modal-padding`
  - `--bl-tag-border-radius`

## CSS Structure

### Required Structure
```css
@layer components {
  .component-name {
    /* CSS variables first */
    --bl-component-property: value;
    --bl-component-color: var(--bl-clr-gray-800);
    
    /* Component styles */
    /* ... */
  }
  
  /* Size variants */
  .component-name-sm {
    --bl-component-size: smaller-value;
  }
  
  .component-name-lg {
    --bl-component-size: larger-value;
  }
  
  /* Semantic variants */
  .component-name-primary {
    --bl-component-color: var(--bl-clr-primary-600);
  }
  
  .component-name-success {
    --bl-component-color: var(--bl-clr-green-600);
  }
  
  .component-name-danger {
    --bl-component-color: var(--bl-clr-red-600);
  }
  
  .component-name-warning {
    --bl-component-color: var(--bl-clr-orange-600);
  }
  
  /* Dark theme support */
  .dark .component-name,
  [data-theme="dark"] .component-name {
    --bl-component-color: var(--bl-clr-gray-300);
  }
}
```

### Size Variants
Standard size variants (not all components need all sizes):
- `xs`: Extra small
- `sm`: Small
- `md`: Medium (default)
- `lg`: Large
- `xl`: Extra large

### Semantic Variants
Standard semantic variants (when applicable):
- `primary`: Primary brand color
- `success`: Green for success states
- `danger`: Red for error/danger states
- `warning`: Orange for warnings
- `info`: Blue for informational content

### Available Color Variables
Use these predefined color variables:
- **Gray scale**: `--bl-clr-gray-50` to `--bl-clr-gray-950`
- **Primary**: `--bl-clr-primary-50` to `--bl-clr-primary-950`
- **Success**: `--bl-clr-green-50` to `--bl-clr-green-950`
- **Danger**: `--bl-clr-red-50` to `--bl-clr-red-950`
- **Warning**: `--bl-clr-orange-50` to `--bl-clr-orange-950`
- **Info**: `--bl-clr-blue-50` to `--bl-clr-blue-950`
- **Surface colors**: `--bl-clr-surface`, `--bl-clr-background`
- **Text colors**: `--bl-clr-text`, `--bl-clr-text-inverted`
- **Border**: `--bl-border-color`

### Other Global Variables
- **Border radius**: `--bl-border-radius`, `--bl-border-radius-sm`, `--bl-border-radius-lg`, etc.
- **Shadows**: `--bl-shadow-sm`, `--bl-shadow`, `--bl-shadow-lg`, `--bl-shadow-xl`
- **Transitions**: `--bl-transition-xs` to `--bl-transition-xl`
- **Opacity**: `--bl-disabled-opacity`

## Dark Mode Support

### Required Dark Mode Implementation
Every component must support dark mode using both class and attribute selectors:

```css
.dark .component,
[data-theme="dark"] .component {
  --bl-component-color: var(--bl-clr-gray-300);
  --bl-component-bg: var(--bl-clr-gray-800);
}
```

### Dark Mode Color Patterns
- Light backgrounds (100-300) → Dark backgrounds (800-900)
- Dark text (700-900) → Light text (100-300)
- Bright accent colors (600-700) → Slightly muted accent colors (400-500)

## Storybook Stories Structure

### Basic Story Template
```typescript
import type { Meta, StoryObj } from "@storybook/html";

type ComponentArgs = {
  // Define component properties
  size?: string;
  variant?: string;
  disabled?: boolean;
  // Add other relevant props
};

const meta: Meta<ComponentArgs> = {
  title: "Components/ComponentName",
  argTypes: {
    size: {
      control: "select",
      options: ["sm", "md", "lg", "xl"],
    },
    variant: {
      control: "select", 
      options: ["default", "primary", "success", "danger", "warning"],
    },
    disabled: {
      control: "boolean",
    },
  },
  args: {
    size: "md",
    variant: "default",
    disabled: false,
  },
  render: (args) => {
    // Component HTML generation logic
    const classes = [
      "component-name",
      args.size !== "md" ? `component-name-${args.size}` : "",
      args.variant !== "default" ? `component-name-${args.variant}` : "",
      args.disabled ? "disabled" : "",
    ].filter(Boolean).join(" ");
    
    return `<div class="${classes}">Component Content</div>`;
  },
};

export default meta;
type Story = StoryObj<ComponentArgs>;

export const Default: Story = {};

export const Sizes: Story = {
  render: () => `
    <div class="flex gap-4 items-center">
      <div class="component-name component-name-sm">Small</div>
      <div class="component-name">Medium</div>
      <div class="component-name component-name-lg">Large</div>
    </div>
  `,
};

export const Variants: Story = {
  render: () => `
    <div class="flex gap-4 items-center">
      <div class="component-name">Default</div>
      <div class="component-name component-name-primary">Primary</div>
      <div class="component-name component-name-success">Success</div>
      <div class="component-name component-name-danger">Danger</div>
    </div>
  `,
};
```

## Component Import Registration

### Add CSS Import
Add the component CSS import to `src/bloum.css`:
```css
@import "./components/[component-name]/[component-name].css";
```

### Custom Element Registration (if needed)
For interactive components, register in the appropriate initialization file.

## Accessibility Requirements

### Focus Management
- Use `:focus-visible` for keyboard focus indicators
- Provide adequate contrast ratios
- Use `outline: 2px solid var(--bl-clr-primary-600)` for focus styles

### ARIA Support
- Add appropriate ARIA attributes for screen readers
- Use semantic HTML elements when possible
- Provide proper labels and descriptions

## Best Practices

### CSS Organization
1. Start with CSS variables
2. Add base component styles
3. Include size variants
4. Include semantic variants  
5. Include style variants
6. Add dark mode support
7. Include accessibility styles

### Performance
- Use CSS custom properties for theming
- Leverage CSS layers (`@layer components`)
- Minimize JavaScript for simple components
- Use efficient CSS selectors

### Responsive Design
- Components should work across all screen sizes
- Use appropriate units (rem, em, %)
- Consider mobile-first design

## Common Patterns

### Interactive States
```css
.component {
  transition: all var(--bl-transition-md);
}

.component:hover {
  /* hover state */
}

.component:active {
  /* active state */
}

.component:disabled,
.component[disabled] {
  opacity: var(--bl-disabled-opacity);
  cursor: not-allowed;
}
```

### Loading States
```css
.component-loading {
  opacity: var(--bl-disabled-opacity);
  cursor: not-allowed;
}
```

## Component Types

### CSS-Only Components

Simple components that only require CSS:

- Spinner
- Badge
- Alert
- Card

### Interactive Components  

Components that require JavaScript/TypeScript:

- Modal
- Dropdown
- Tabs
- Accordion

## Examples to Reference
- **Simple component**: `src/components/spinner/`
- **Component with variants**: `src/components/button/`
- **Component with semantic variants**: `src/components/alert/`
- **Interactive component**: `src/components/modal/` 